src/pages/Index.tsx
import React from 'react';
import { GitBranch, AlertCircle, CheckCircle2, Clock, XCircle } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';

interface ScanResult {
  id: string;
  status: 'success' | 'failed' | 'pending' | 'warning';
  branch: string;
  timestamp: string;
  metrics: {
    bugs: number;
    vulnerabilities: number;
    codeSmells: number;
    coverage: number;
  };
}

const mockResults: ScanResult[] = [
  {
    id: '1',
    status: 'success',
    branch: 'main',
    timestamp: '2024-03-10 14:30',
    metrics: {
      bugs: 0,
      vulnerabilities: 0,
      codeSmells: 3,
      coverage: 87,
    },
  },
  {
    id: '2',
    status: 'warning',
    branch: 'feature/auth',
    timestamp: '2024-03-10 13:15',
    metrics: {
      bugs: 2,
      vulnerabilities: 1,
      codeSmells: 5,
      coverage: 72,
    },
  },
  {
    id: '3',
    status: 'pending',
    branch: 'feature/api',
    timestamp: '2024-03-10 12:45',
    metrics: {
      bugs: 0,
      vulnerabilities: 0,
      codeSmells: 0,
      coverage: 0,
    },
  },
];

const StatusIcon = ({ status }: { status: ScanResult['status'] }) => {
  switch (status) {
    case 'success':
      return <CheckCircle2 className="w-5 h-5 text-green-500" />;
    case 'failed':
      return <XCircle className="w-5 h-5 text-red-500" />;
    case 'warning':
      return <AlertCircle className="w-5 h-5 text-amber-500" />;
    case 'pending':
      return <Clock className="w-5 h-5 text-gray-500" />;
    default:
      return null;
  }
};

const Index = () => {
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col gap-8">
          <header className="text-center">
            <h1 className="text-4xl font-semibold text-gray-900 mb-2">SonarCloud Scan Dashboard</h1>
            <p className="text-gray-600">Monitor and analyze your code quality with ease</p>
          </header>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <MetricCard title="Total Scans" value="28" trend="+3" />
            <MetricCard title="Success Rate" value="92%" trend="+2.5%" />
            <MetricCard title="Avg. Coverage" value="84%" trend="-1.2%" />
            <MetricCard title="Active Branches" value="4" trend="+1" />
          </div>

          <div className="space-y-4">
            {mockResults.map((result) => (
              <ScanResultCard key={result.id} result={result} />
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

const MetricCard = ({ title, value, trend }: { title: string; value: string; trend: string }) => (
  <Card className="p-6 transition-transform hover:scale-[1.02] cursor-pointer">
    <h3 className="text-sm font-medium text-gray-500 mb-1">{title}</h3>
    <div className="flex items-end justify-between">
      <span className="text-2xl font-semibold text-gray-900">{value}</span>
      <span className={`text-sm ${trend.startsWith('+') ? 'text-green-500' : 'text-red-500'}`}>
        {trend}
      </span>
    </div>
  </Card>
);

const ScanResultCard = ({ result }: { result: ScanResult }) => (
  <Card className="p-6 transition-all hover:shadow-md">
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-4">
        <StatusIcon status={result.status} />
        <div>
          <div className="flex items-center gap-2">
            <GitBranch className="w-4 h-4 text-gray-500" />
            <span className="font-medium text-gray-900">{result.branch}</span>
          </div>
          <span className="text-sm text-gray-500">{result.timestamp}</span>
        </div>
      </div>
      <div className="flex gap-2">
        <Badge variant={getBadgeVariant(result.status)} className="capitalize">
          {result.status}
        </Badge>
      </div>
    </div>

    {result.status !== 'pending' && (
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
        <MetricItem label="Bugs" value={result.metrics.bugs} />
        <MetricItem label="Vulnerabilities" value={result.metrics.vulnerabilities} />
        <MetricItem label="Code Smells" value={result.metrics.codeSmells} />
        <MetricItem label="Coverage" value={`${result.metrics.coverage}%`} />
      </div>
    )}
  </Card>
);

const MetricItem = ({ label, value }: { label: string; value: number | string }) => (
  <div className="text-center p-2 bg-gray-50 rounded-lg">
    <div className="text-sm font-medium text-gray-500">{label}</div>
    <div className="text-lg font-semibold text-gray-900">{value}</div>
  </div>
);

const getBadgeVariant = (status: ScanResult['status']) => {
  switch (status) {
    case 'success':
      return 'default';
    case 'failed':
      return 'destructive';
    case 'warning':
      return 'secondary';
    case 'pending':
      return 'outline';
    default:
      return 'default';
  }
};

export default Index;